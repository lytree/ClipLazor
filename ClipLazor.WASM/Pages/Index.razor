@page "/"
@using ClipLazor.Components;
@inject IClipLazor Clipboard;

<PageTitle>Clipboard Example</PageTitle>
<p><b> Clipboard Supported</b>: @isSupported</p>
<p><b> Is Write Permitted</b>: @isWritePermitted</p>
<p><b> Is Read Permitted</b>: @isReadPermitted</p>

<hr/>
<h2>Text Clipbard</h2>
<input @bind="txt" />
<input @bind="pastedTxt" placeholder="past text here"/>
<button @onclick="async () => await CopyTxt()">Copy</button>
<button @onclick="async () => await PasteTxt()">Paste</button>
<p>@msg</p>

<hr />
<div>
    <h2>Data Clipboard</h2>
    <p>Image To Copy:</p>
    <img style=" border:2px solid indigo;" src="data:image/png;base64,@imageToCopy" alt="Image to Copy" />
    <p>Paste Image: </p>
    <img style=" border:2px solid black;" alt="imageToCopy" src="data:image/png;base64,@pastedImg" />
    <button @onclick="async ()=> await CopyData()">Copy Image</button>
    <button @onclick="async ()=> await PasteData()">Paste Image</button>
    <p>@dmsg</p>
</div>
<div>
    <h2>ClipboardTextAction Component</h2>
    <ClipboardTextAction Text="Hello World!">Say hi to the clipboard</ClipboardTextAction>
</div>


@code {
    bool isSupported = default;
    bool isWritePermitted = default;
    bool isReadPermitted = default;
    string msg = string.Empty;
    string txt = string.Empty;
    string pastedTxt = string.Empty;
    string imageToCopy = string.Empty;
    string pastedImg = string.Empty;
    string dmsg = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        isSupported = await Clipboard.IsClipboardSupported();
        isWritePermitted = await Clipboard.IsPermitted(PermissionCommand.Write);
        isReadPermitted = await Clipboard.IsPermitted(PermissionCommand.Read);
        imageToCopy = "";

    }

    async ValueTask CopyTxt()
    {
        if(txt.Length > 0 && isSupported)
        {
            if (isWritePermitted)
            {
                var isCopied = await Clipboard.WriteTextAsync(txt.AsMemory());
                if (isCopied)
                {
                    msg = "Text Copied";
                }
                else
                {
                    msg = "Couldn't copy the text!.";
                }
            }

            StateHasChanged();

        }
    }
    async ValueTask PasteTxt()
    {
        if(isSupported && isWritePermitted)
        {
            var pastedText = await Clipboard.ReadTextAsync();
            if (pastedText is not null)
            {
                msg = "Text Pasted";
                pastedTxt = pastedText;
            }
            else
            {
                msg = "Couldn't paste the text!.";
            }
        }

        StateHasChanged();
    }
    async ValueTask CopyData()
    {
        byte[] imgArray = Convert.FromBase64String(imageToCopy);

        if(imgArray.Length > 0 && isWritePermitted)
        {
            var isDataCopied = await Clipboard.WriteDataAsync(imgArray, "image/png");

            if (isDataCopied)
            {
                dmsg = "Image Copied!";
            }
            else
            {
                dmsg = "Failed to copy the image!.";
            }
        }
        StateHasChanged();
    }
    async ValueTask PasteData()
    {
        if (isReadPermitted)
        {
            var pastedData = await Clipboard.ReadDataAsync("image/png");
            if (!pastedData.IsEmpty)
            {
                pastedImg = Convert.ToBase64String(pastedData.ToArray());
                dmsg = "Image Pasted";

            }
            else
            {
                dmsg = "Couldn't paste the image";
            }
        }
        StateHasChanged();
    }

}
